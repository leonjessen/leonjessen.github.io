[
  {
    "objectID": "posts/pca/index.html",
    "href": "posts/pca/index.html",
    "title": "Data Science meets music",
    "section": "",
    "text": "First, let us start off by loading some packages:\n\nlibrary(\"tibble\")\nlibrary(\"dplyr\")\nlibrary(\"tidyr\")\nlibrary(\"broom\")\nlibrary(\"ggplot2\")\nlibrary(\"ggrepel\")\n\nThen, we will one-hot encode the major scale of each key by denoting a given tone 1 if it is in the scale and a 0 otherwise:\n\nmajor_scales <- tribble(\n  ~key, ~C, ~`C#`, ~D, ~Eb, ~E, ~F, ~`F#`, ~G, ~`G#`, ~A, ~Bb, ~B,\n  \"C\",    1,   0,    1,  0,   1,  1,   0,    1,   0,    1,  0,   1,\n  \"C#\",   1,   1,    0,  1,   0,  1,   1,    0,   1,    0,  1,   0,\n  \"D\",    0,   1,    1,  0,   1,  0,   1,    1,   0,    1,  0,   1,\n  \"Eb\",   1,   0,    1,  1,   0,  1,   0,    1,   1,    0,  1,   0, \n  \"E\",    0,   1,    0,  1,   1,  0,   1,    0,   1,    1,  0,   1,\n  \"F\",    1,   0,    1,  0,   1,  1,   0,    1,   0,    1,  1,   0,\n  \"F#\",   0,   1,    0,  1,   0,  1,   1,    0,   1,    0,  1,   1,\n  \"G\",    1,   0,    1,  0,   1,  0,   1,    1,   0,    1,  0,   1,\n  \"G#\",   1,   1,    0,  1,   0,  1,   0,    1,   1,    0,  1,   0,\n  \"A\",    0,   1,    1,  0,   1,  0,   1,    0,   1,    1,  0,   1,\n  \"Bb\",   1,   0,    1,  1,   0,  1,   0,    1,   0,    1,  1,   0,\n  \"B\",    0,   1,    0,  1,   1,  0,   1,    0,   1,    0,  1,   1\n)\n\nThen we will perform a Principal Component Analysis of the data:\n\nscales_pca <- major_scales %>%\n  column_to_rownames(\"key\") %>%\n  prcomp %>% \n  tidy %>%\n  rename(key = row) %>% \n  filter(PC %>% between(1, 2)) %>% \n  pivot_wider(id_cols = key,\n              names_from = PC,\n              values_from = value) %>% \n  rename(PC1 = `1`,\n         PC2 = `2`)\n\nFinally, we will visualise the data using the first two principal components:\n\nscales_pca %>% \n  ggplot(aes(x = PC1,\n             y = PC2,\n             label = key)) + \n  geom_label() +\n  coord_fixed() +\n  theme_minimal()\n\n\n\n\nLooks familiar? But what happens if we add minor as well?\n\nminor_scales <- tribble(\n  ~key, ~C, ~`C#`, ~D, ~Eb, ~E, ~F, ~`F#`, ~G, ~`G#`, ~A, ~Bb, ~B,\n  \"Cm\",   1,   0,    1,  1,   0,  1,   0,    1,   1,    0,  1,   0,\n  \"C#m\",  0,   1,    0,  1,   1,  0,   1,    0,   1,    1,  0,   1,\n  \"Dm\",   1,   0,    1,  0,   1,  1,   0,    1,   0,    1,  1,   0,\n  \"Ebm\",  0,   1,    0,  1,   0,  1,   1,    0,   1,    0,  1,   1,\n  \"Em\",   1,   0,    1,  0,   1,  0,   1,    1,   0,    1,  0,   1,\n  \"Fm\",   1,   1,    0,  1,   0,  1,   0,    1,   1,    0,  1,   0,\n  \"F#m\",  0,   1,    1,  0,   1,  0,   1,    0,   1,    1,  0,   1,\n  \"Gm\",   1,   0,    1,  1,   0,  1,   0,    1,   0,    1,  1,   0,\n  \"G#m\",  0,   1,    0,  1,   1,  0,   1,    0,   1,    0,  1,   1,\n  \"Am\",   1,   0,    1,  0,   1,  1,   0,    1,   0,    1,  0,   1,\n  \"Bbm\",  1,   1,    0,  1,   0,  1,   1,    0,   1,    0,  1,   0,\n  \"Bm\",   0,   1,    1,  0,   1,  0,   1,    1,   0,    1,  0,   1,\n)\n\n…and again, we perform a PCA:\n\nscales_pca <- major_scales %>%\n  bind_rows(minor_scales) %>% \n  column_to_rownames(\"key\") %>%\n  prcomp %>%\n  tidy %>%\n  rename(key = row) %>% \n  filter(PC %>% between(1, 2)) %>% \n  pivot_wider(id_cols = key,\n              names_from = PC,\n              values_from = value) %>% \n  rename(PC1 = `1`,\n         PC2 = `2`)\n\n…and visualise using ggrepel to avoid overlapping labels:\n\nscales_pca %>% \n  ggplot(aes(x = PC1,\n             y = PC2,\n             label = key)) + \n  geom_label_repel() +\n  geom_point() +\n  coord_fixed() +\n  theme_minimal()\n\n\n\n\n…and there you have it - If you do a PCA on one-hot encoded major and minor scales, you get the circle of fifths!"
  },
  {
    "objectID": "posts/mandelbrot/index.html",
    "href": "posts/mandelbrot/index.html",
    "title": "Visualising the Mandelbrot set in R",
    "section": "",
    "text": "In this brief post, we will take a look at how we can visualise the Mandelbrot set using recursion in R. The set looks like this (click the image to enlarge):\n\n\n\n\n\nThis post was inspired by this excellent Numberphile video featuring Dr. Holly Krieger. Below, we will go over the code, but skip the mathematics, as these are covered in the video."
  },
  {
    "objectID": "posts/mandelbrot/index.html#functions",
    "href": "posts/mandelbrot/index.html#functions",
    "title": "Visualising the Mandelbrot set in R",
    "section": "Functions",
    "text": "Functions\nEach pixel in the final image is a count, so we need to create a function, which computes the count for a given input c, not how we are using recursion to solve the problem:\n\nMandelbrot_count <- function(c, z = complex(r = 0, i = 0), n = 0, lim = lim){\n  n <- n + 1\n  z <- z * z + c\n  if( abs(z) > 2 | n > lim ){\n    return(n)\n  }\n  # Recurse until return criteria are met\n  Mandelbrot_count(c = c, z = z, n = n, lim = lim)\n}\n\nNext, we need to create a function, which can compute the pixels of the final visualisation:\n\nMandelbrot_matrix <- function(res, lim){\n  A <- seq(-2, 0.5, len = res)            # Values along the complex a-axis\n  B <- seq(-1.2, 1.2, len = res)          # Values along the complex b-axis\n  mb <- matrix(0, nrow = res, ncol = res) # Prebuild mandelbrot count matrix\n  \n  # Each pixel in the final picture is a count, generate counts\n  for( i in 1:res ){\n    for( j in 1:res ){\n      mb[i,j] <- Mandelbrot_count(c = complex(r = A[i], i = B[j]), lim = lim)\n    }\n  }\n  \n  # Done, return\n  return(mb)\n}"
  },
  {
    "objectID": "posts/mandelbrot/index.html#computation",
    "href": "posts/mandelbrot/index.html#computation",
    "title": "Visualising the Mandelbrot set in R",
    "section": "Computation",
    "text": "Computation\nNow, we can generate the count matrix of the mandelbrot set:\n\n#  - res [Pixel resolution res x res]\n#  - lim [Bail out limit for max number of iterations]\nres <- 2048\nlim <- 128\nmb <- Mandelbrot_matrix(res = res, lim = lim)"
  },
  {
    "objectID": "posts/mandelbrot/index.html#visualisation",
    "href": "posts/mandelbrot/index.html#visualisation",
    "title": "Visualising the Mandelbrot set in R",
    "section": "Visualisation",
    "text": "Visualisation\nLastly, we can generate the visualisation of the mandelbrot set:\n\n# Set colour palette\npalette <- c(\"darkblue\", \"lightblue\", \"white\", \"yellow\", \"orange\", \"black\")\ncolours <- colorRampPalette(palette)(n = lim)\n\n# Plot to png\npng_file <- paste0(\"mandelbrot_png_res_\", res, \"_lim_\", lim, \".png\")\npng(filename = png_file, width = res, height = res)\npar(pty = \"s\")\nimage(mb, col = colours, xaxt = \"n\", yaxt = \"n\")\ndev.off()\n\nDone - That’s the code, which produces the image at the beginning of this post.\nUntil next time…"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am tenured Associate Professor of bioinformatics at the Technical University of Denmark, where I am heading the Computational Autoimmunity Group at Section for Bioinformatics, Department of Health Technology. In addition to this position, I am also co-founder/-CEO at nordicdatalab, specialising in data science infrastructure consulting and training."
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\n\nSep. 2021 - Present: Associate Professor of Bioinformatics, DTU Health Tech\nFeb. 2019 - Sep. 2021: Assistant Professor of Bioinformatics, DTU Health Tech\nSep. 2017 - Feb. 2019: Postdoctoral Researcher, DTU Bioinformatics\nJan. 2016 - Sep. 2017: Senior-/Postdoctoral Researcher, Herlev and Gentofte Hospital\nApr. 2014 - Jan. 2016: Postdoctoral Researcher, Steno Diabetes Center"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\n2019: University teaching in the engineering sciences, Introductory education, LearningLab, Technical University of Denmark.\n2014: Doctor of Philosophy, PhD in Bioinformatics and Computational Biology. Center for Biological Sequence Analysis, Technical University of Denmark. Thesis title: “Immunoinformatics of Placental Malaria Vaccine Development”.\n2010: Master of Science in Biotech engineering. Technical University of Denmark. Thesis title: “Analysis of Malaria Proteins - The DBL5\\(\\epsilon\\) subdomain of VAR2CSA, Involved in Placental Adhesion in Pregnancy Associated Malaria”\n2008: Bachelor of Science in engineering. Technical University of Denmark. Thesis title: “Development of Immobilization of Glycosidases on Nano-beads to be used for Enzymatic Removal of Blood Group A and B on Red Blood Cells”"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "code\n\n\ndataviz\n\n\n\n\n\n\n\n\n\n\n\nAug 3, 2022\n\n\nLeon Eyrich Jessen\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncode\n\n\ndataviz\n\n\n\n\n\n\n\n\n\n\n\nAug 3, 2022\n\n\nLeon Eyrich Jessen\n\n\n\n\n\n\nNo matching items"
  }
]